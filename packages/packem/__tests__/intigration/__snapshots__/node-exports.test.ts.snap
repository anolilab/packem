// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`packem node exports > cjs-interop > should output 'default export with multi named export' correctly when cjsInterop > cjs dts output 1`] = `
"declare const test: () => string;
declare const test2 = "this should be in final bundle";
declare const test3 = "this should be in final bundle";
declare const test4 = "this should be in final bundle";
declare const test5 = "this should be in final bundle";

export {  test2, test3, test4, test5 };

export = test;
"
`;

exports[`packem node exports > cjs-interop > should output 'default export with multi named export' correctly when cjsInterop > cjs output 1`] = `
"'use strict';

Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
const test = /* @__PURE__ */ __name(() => {
  return "this should be in final bundle";
}, "test");
const test2 = "this should be in final bundle";
const test3 = "this should be in final bundle";
const test4 = "this should be in final bundle";
const test5 = "this should be in final bundle";

module.exports = test;
module.exports.test2 = test2;
module.exports.test3 = test3;
module.exports.test4 = test4;
module.exports.test5 = test5;
"
`;

exports[`packem node exports > cjs-interop > should output 'default export with multi named export' correctly when cjsInterop > dts output 1`] = `
"declare const test: () => string;
declare const test2 = "this should be in final bundle";
declare const test3 = "this should be in final bundle";
declare const test4 = "this should be in final bundle";
declare const test5 = "this should be in final bundle";

export {  test2, test3, test4, test5 };

export = test;
"
`;

exports[`packem node exports > cjs-interop > should output 'default export with multi named export' correctly when cjsInterop > mjs dts output 1`] = `
"declare const test: () => string;
declare const test2 = "this should be in final bundle";
declare const test3 = "this should be in final bundle";
declare const test4 = "this should be in final bundle";
declare const test5 = "this should be in final bundle";

export { test as default, test2, test3, test4, test5 };
"
`;

exports[`packem node exports > cjs-interop > should output 'default export with multi named export' correctly when cjsInterop > mjs output 1`] = `
"var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
const test = /* @__PURE__ */ __name(() => {
  return "this should be in final bundle";
}, "test");
const test2 = "this should be in final bundle";
const test3 = "this should be in final bundle";
const test4 = "this should be in final bundle";
const test5 = "this should be in final bundle";

export { test as default, test2, test3, test4, test5 };
"
`;

exports[`packem node exports > cjs-interop > should output 'default export with named export' correctly when cjsInterop > cjs dts output 1`] = `
"declare const test: () => string;
declare const test2 = "this should be in final bundle";

export {  test2 };

export = test;
"
`;

exports[`packem node exports > cjs-interop > should output 'default export with named export' correctly when cjsInterop > cjs output 1`] = `
"'use strict';

Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
const test = /* @__PURE__ */ __name(() => {
  return "this should be in final bundle";
}, "test");
const test2 = "this should be in final bundle";

module.exports = test;
module.exports.test2 = test2;
"
`;

exports[`packem node exports > cjs-interop > should output 'default export with named export' correctly when cjsInterop > dts output 1`] = `
"declare const test: () => string;
declare const test2 = "this should be in final bundle";

export {  test2 };

export = test;
"
`;

exports[`packem node exports > cjs-interop > should output 'default export with named export' correctly when cjsInterop > mjs dts output 1`] = `
"declare const test: () => string;
declare const test2 = "this should be in final bundle";

export { test as default, test2 };
"
`;

exports[`packem node exports > cjs-interop > should output 'default export with named export' correctly when cjsInterop > mjs output 1`] = `
"var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
const test = /* @__PURE__ */ __name(() => {
  return "this should be in final bundle";
}, "test");
const test2 = "this should be in final bundle";

export { test as default, test2 };
"
`;

exports[`packem node exports > should bundle 'devDependencies' that are used inside the code and are not marked as external > cjs dts output 1`] = `
"declare const indent: string;

export { indent };
"
`;

exports[`packem node exports > should bundle 'devDependencies' that are used inside the code and are not marked as external > cjs output 1`] = `
"'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

// Detect either spaces or tabs but not both to properly handle tabs for indentation and spaces for alignment
const INDENT_REGEX = /^(?:( )+|\\t+)/;

const INDENT_TYPE_SPACE = 'space';
const INDENT_TYPE_TAB = 'tab';

/**
Make a Map that counts how many indents/unindents have occurred for a given size and how many lines follow a given indentation.

The key is a concatenation of the indentation type (s = space and t = tab) and the size of the indents/unindents.

\`\`\`
indents = {
	t3: [1, 0],
	t4: [1, 5],
	s5: [1, 0],
	s12: [1, 0],
}
\`\`\`
*/
function makeIndentsMap(string, ignoreSingleSpaces) {
	const indents = new Map();

	// Remember the size of previous line's indentation
	let previousSize = 0;
	let previousIndentType;

	// Indents key (ident type + size of the indents/unindents)
	let key;

	for (const line of string.split(/\\n/g)) {
		if (!line) {
			// Ignore empty lines
			continue;
		}

		let indent;
		let indentType;
		let use;
		let weight;
		let entry;
		const matches = line.match(INDENT_REGEX);

		if (matches === null) {
			previousSize = 0;
			previousIndentType = '';
		} else {
			indent = matches[0].length;
			indentType = matches[1] ? INDENT_TYPE_SPACE : INDENT_TYPE_TAB;

			// Ignore single space unless it's the only indent detected to prevent common false positives
			if (ignoreSingleSpaces && indentType === INDENT_TYPE_SPACE && indent === 1) {
				continue;
			}

			if (indentType !== previousIndentType) {
				previousSize = 0;
			}

			previousIndentType = indentType;

			use = 1;
			weight = 0;

			const indentDifference = indent - previousSize;
			previousSize = indent;

			// Previous line have same indent?
			if (indentDifference === 0) {
				// Not a new "use" of the current indent:
				use = 0;
				// But do add a bit to it for breaking ties:
				weight = 1;
				// We use the key from previous loop
			} else {
				const absoluteIndentDifference = indentDifference > 0 ? indentDifference : -indentDifference;
				key = encodeIndentsKey(indentType, absoluteIndentDifference);
			}

			// Update the stats
			entry = indents.get(key);
			entry = entry === undefined ? [1, 0] : [entry[0] + use, entry[1] + weight];

			indents.set(key, entry);
		}
	}

	return indents;
}

// Encode the indent type and amount as a string (e.g. 's4') for use as a compound key in the indents Map.
function encodeIndentsKey(indentType, indentAmount) {
	const typeCharacter = indentType === INDENT_TYPE_SPACE ? 's' : 't';
	return typeCharacter + String(indentAmount);
}

// Extract the indent type and amount from a key of the indents Map.
function decodeIndentsKey(indentsKey) {
	const keyHasTypeSpace = indentsKey[0] === 's';
	const type = keyHasTypeSpace ? INDENT_TYPE_SPACE : INDENT_TYPE_TAB;

	const amount = Number(indentsKey.slice(1));

	return {type, amount};
}

// Return the key (e.g. 's4') from the indents Map that represents the most common indent,
// or return undefined if there are no indents.
function getMostUsedKey(indents) {
	let result;
	let maxUsed = 0;
	let maxWeight = 0;

	for (const [key, [usedCount, weight]] of indents) {
		if (usedCount > maxUsed || (usedCount === maxUsed && weight > maxWeight)) {
			maxUsed = usedCount;
			maxWeight = weight;
			result = key;
		}
	}

	return result;
}

function makeIndentString(type, amount) {
	const indentCharacter = type === INDENT_TYPE_SPACE ? ' ' : '\\t';
	return indentCharacter.repeat(amount);
}

function detectIndent(string) {

	// Identify indents while skipping single space indents to avoid common edge cases (e.g. code comments)
	// If no indents are identified, run again and include all indents for comprehensive detection
	let indents = makeIndentsMap(string, true);
	if (indents.size === 0) {
		indents = makeIndentsMap(string, false);
	}

	const keyOfMostUsedIndent = getMostUsedKey(indents);

	let type;
	let amount = 0;
	let indent = '';

	if (keyOfMostUsedIndent !== undefined) {
		({type, amount} = decodeIndentsKey(keyOfMostUsedIndent));
		indent = makeIndentString(type, amount);
	}

	return {
		amount,
		type,
		indent,
	};
}

const { indent: dIndent } = detectIndent("  file");
const indent = dIndent;

exports.indent = indent;
"
`;

exports[`packem node exports > should bundle 'devDependencies' that are used inside the code and are not marked as external > dts output 1`] = `
"declare const indent: string;

export { indent };
"
`;

exports[`packem node exports > should bundle 'devDependencies' that are used inside the code and are not marked as external > mjs dts output 1`] = `
"declare const indent: string;

export { indent };
"
`;

exports[`packem node exports > should bundle 'devDependencies' that are used inside the code and are not marked as external > mjs output 1`] = `
"// Detect either spaces or tabs but not both to properly handle tabs for indentation and spaces for alignment
const INDENT_REGEX = /^(?:( )+|\\t+)/;

const INDENT_TYPE_SPACE = 'space';
const INDENT_TYPE_TAB = 'tab';

/**
Make a Map that counts how many indents/unindents have occurred for a given size and how many lines follow a given indentation.

The key is a concatenation of the indentation type (s = space and t = tab) and the size of the indents/unindents.

\`\`\`
indents = {
	t3: [1, 0],
	t4: [1, 5],
	s5: [1, 0],
	s12: [1, 0],
}
\`\`\`
*/
function makeIndentsMap(string, ignoreSingleSpaces) {
	const indents = new Map();

	// Remember the size of previous line's indentation
	let previousSize = 0;
	let previousIndentType;

	// Indents key (ident type + size of the indents/unindents)
	let key;

	for (const line of string.split(/\\n/g)) {
		if (!line) {
			// Ignore empty lines
			continue;
		}

		let indent;
		let indentType;
		let use;
		let weight;
		let entry;
		const matches = line.match(INDENT_REGEX);

		if (matches === null) {
			previousSize = 0;
			previousIndentType = '';
		} else {
			indent = matches[0].length;
			indentType = matches[1] ? INDENT_TYPE_SPACE : INDENT_TYPE_TAB;

			// Ignore single space unless it's the only indent detected to prevent common false positives
			if (ignoreSingleSpaces && indentType === INDENT_TYPE_SPACE && indent === 1) {
				continue;
			}

			if (indentType !== previousIndentType) {
				previousSize = 0;
			}

			previousIndentType = indentType;

			use = 1;
			weight = 0;

			const indentDifference = indent - previousSize;
			previousSize = indent;

			// Previous line have same indent?
			if (indentDifference === 0) {
				// Not a new "use" of the current indent:
				use = 0;
				// But do add a bit to it for breaking ties:
				weight = 1;
				// We use the key from previous loop
			} else {
				const absoluteIndentDifference = indentDifference > 0 ? indentDifference : -indentDifference;
				key = encodeIndentsKey(indentType, absoluteIndentDifference);
			}

			// Update the stats
			entry = indents.get(key);
			entry = entry === undefined ? [1, 0] : [entry[0] + use, entry[1] + weight];

			indents.set(key, entry);
		}
	}

	return indents;
}

// Encode the indent type and amount as a string (e.g. 's4') for use as a compound key in the indents Map.
function encodeIndentsKey(indentType, indentAmount) {
	const typeCharacter = indentType === INDENT_TYPE_SPACE ? 's' : 't';
	return typeCharacter + String(indentAmount);
}

// Extract the indent type and amount from a key of the indents Map.
function decodeIndentsKey(indentsKey) {
	const keyHasTypeSpace = indentsKey[0] === 's';
	const type = keyHasTypeSpace ? INDENT_TYPE_SPACE : INDENT_TYPE_TAB;

	const amount = Number(indentsKey.slice(1));

	return {type, amount};
}

// Return the key (e.g. 's4') from the indents Map that represents the most common indent,
// or return undefined if there are no indents.
function getMostUsedKey(indents) {
	let result;
	let maxUsed = 0;
	let maxWeight = 0;

	for (const [key, [usedCount, weight]] of indents) {
		if (usedCount > maxUsed || (usedCount === maxUsed && weight > maxWeight)) {
			maxUsed = usedCount;
			maxWeight = weight;
			result = key;
		}
	}

	return result;
}

function makeIndentString(type, amount) {
	const indentCharacter = type === INDENT_TYPE_SPACE ? ' ' : '\\t';
	return indentCharacter.repeat(amount);
}

function detectIndent(string) {

	// Identify indents while skipping single space indents to avoid common edge cases (e.g. code comments)
	// If no indents are identified, run again and include all indents for comprehensive detection
	let indents = makeIndentsMap(string, true);
	if (indents.size === 0) {
		indents = makeIndentsMap(string, false);
	}

	const keyOfMostUsedIndent = getMostUsedKey(indents);

	let type;
	let amount = 0;
	let indent = '';

	if (keyOfMostUsedIndent !== undefined) {
		({type, amount} = decodeIndentsKey(keyOfMostUsedIndent));
		indent = makeIndentString(type, amount);
	}

	return {
		amount,
		type,
		indent,
	};
}

const { indent: dIndent } = detectIndent("  file");
const indent = dIndent;

export { indent };
"
`;

exports[`packem node exports > should handle externals > cjs output 1`] = `
"'use strict';

const a = require('peer-dep');
const b = require('peer-dep-meta');

const _interopDefaultCompat = e => e && typeof e === 'object' && 'default' in e ? e.default : e;

const a__default = /*#__PURE__*/_interopDefaultCompat(a);
const b__default = /*#__PURE__*/_interopDefaultCompat(b);

const index = a__default + b__default;

module.exports = index;
"
`;

exports[`packem node exports > should handle externals > mjs output 1`] = `
"import a from 'peer-dep';
import b from 'peer-dep-meta';

const index = a + b;

export { index as default };
"
`;

exports[`packem node exports > should output 'class' with 'extends correctly > cjs dts output 1`] = `
"declare class Parent {
    constructor();
}
declare class Feature {
    constructor();
}
declare class Child extends Parent {
    feature: Feature;
    constructor();
}

export { Child };
"
`;

exports[`packem node exports > should output 'class' with 'extends correctly > cjs output 1`] = `
"'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
class Parent {
  static {
    __name(this, "Parent");
  }
  constructor() {
  }
}
class Feature {
  static {
    __name(this, "Feature");
  }
  constructor() {
  }
}
class Child extends Parent {
  static {
    __name(this, "Child");
  }
  feature = new Feature();
  constructor() {
    console.log("before");
    super();
    console.log("after");
  }
}

exports.Child = Child;
"
`;

exports[`packem node exports > should output 'class' with 'extends correctly > dts output 1`] = `
"declare class Parent {
    constructor();
}
declare class Feature {
    constructor();
}
declare class Child extends Parent {
    feature: Feature;
    constructor();
}

export { Child };
"
`;

exports[`packem node exports > should output 'class' with 'extends correctly > mjs dts output 1`] = `
"declare class Parent {
    constructor();
}
declare class Feature {
    constructor();
}
declare class Child extends Parent {
    feature: Feature;
    constructor();
}

export { Child };
"
`;

exports[`packem node exports > should output 'class' with 'extends correctly > mjs output 1`] = `
"var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
class Parent {
  static {
    __name(this, "Parent");
  }
  constructor() {
  }
}
class Feature {
  static {
    __name(this, "Feature");
  }
  constructor() {
  }
}
class Child extends Parent {
  static {
    __name(this, "Child");
  }
  feature = new Feature();
  constructor() {
    console.log("before");
    super();
    console.log("after");
  }
}

export { Child };
"
`;

exports[`packem node exports > should output 'class' with 'extends correctly when minify is used > cjs dts output 1`] = `
"declare class Parent {
    constructor();
}
declare class Feature {
    constructor();
}
declare class Child extends Parent {
    feature: Feature;
    constructor();
}

export { Child };
"
`;

exports[`packem node exports > should output 'class' with 'extends correctly when minify is used > cjs output 1`] = `
"'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
class Parent {
  static {
    __name(this, "Parent");
  }
  constructor() {
  }
}
class Feature {
  static {
    __name(this, "Feature");
  }
  constructor() {
  }
}
class Child extends Parent {
  static {
    __name(this, "Child");
  }
  feature = new Feature();
  constructor() {
    console.log("before");
    super();
    console.log("after");
  }
}

exports.Child = Child;
"
`;

exports[`packem node exports > should output 'class' with 'extends correctly when minify is used > dts output 1`] = `
"declare class Parent {
    constructor();
}
declare class Feature {
    constructor();
}
declare class Child extends Parent {
    feature: Feature;
    constructor();
}

export { Child };
"
`;

exports[`packem node exports > should output 'class' with 'extends correctly when minify is used > mjs dts output 1`] = `
"declare class Parent {
    constructor();
}
declare class Feature {
    constructor();
}
declare class Child extends Parent {
    feature: Feature;
    constructor();
}

export { Child };
"
`;

exports[`packem node exports > should output 'class' with 'extends correctly when minify is used > mjs output 1`] = `
"var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
class Parent {
  static {
    __name(this, "Parent");
  }
  constructor() {
  }
}
class Feature {
  static {
    __name(this, "Feature");
  }
  constructor() {
  }
}
class Child extends Parent {
  static {
    __name(this, "Child");
  }
  feature = new Feature();
  constructor() {
    console.log("before");
    super();
    console.log("after");
  }
}

export { Child };
"
`;
