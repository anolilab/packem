// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`css > stylus > should work with stylus processed 'import' css > js 1`] = `
"'use strict';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
const containers = [];
const styleTags = [];
const injectCss = /* @__PURE__ */ __name2((css, options) => {
  if (!css || typeof document === "undefined") {
    return;
  }
  const position = options.prepend === true ? "prepend" : "append";
  const singleTag = options.singleTag === true;
  const container = typeof options.container === "string" ? document.querySelector(options.container) : document.querySelectorAll("head")[0];
  if (!container) {
    throw new Error("Unable to find container element");
  }
  const createStyleTag = /* @__PURE__ */ __name2(() => {
    const styleTag2 = document.createElement("style");
    styleTag2.setAttribute("type", "text/css");
    if (options.attributes) {
      Object.entries(options.attributes).forEach(([key, value]) => {
        styleTag2.setAttribute(key, value);
      });
    }
    const pos = position === "prepend" ? "afterbegin" : "beforeend";
    container.insertAdjacentElement(pos, styleTag2);
    return styleTag2;
  }, "createStyleTag");
  let styleTag;
  if (singleTag) {
    let id = containers.indexOf(container);
    if (id === -1) {
      id = containers.push(container) - 1;
      styleTags[id] = {};
    }
    if (!styleTags[id][position]) {
      styleTags[id][position] = createStyleTag();
    }
    styleTag = styleTags[id][position];
  } else {
    styleTag = createStyleTag();
  }
  if (styleTag.styleSheet) {
    styleTag.styleSheet.cssText += css;
  } else {
    styleTag.append(document.createTextNode(css));
  }
}, "default");

var css = ".a {\\n  color: #f0f;\\n}\\n.style .foo {\\n  color: #4169e1;\\n}\\n.style .foo .inner {\\n  color: #4169e1;\\n}\\n";
injectCss(css,{});
"
`;

exports[`css > stylus > should work with stylus processed 'import' css > js 2`] = `
"var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
const containers = [];
const styleTags = [];
const injectCss = /* @__PURE__ */ __name2((css, options) => {
  if (!css || typeof document === "undefined") {
    return;
  }
  const position = options.prepend === true ? "prepend" : "append";
  const singleTag = options.singleTag === true;
  const container = typeof options.container === "string" ? document.querySelector(options.container) : document.querySelectorAll("head")[0];
  if (!container) {
    throw new Error("Unable to find container element");
  }
  const createStyleTag = /* @__PURE__ */ __name2(() => {
    const styleTag2 = document.createElement("style");
    styleTag2.setAttribute("type", "text/css");
    if (options.attributes) {
      Object.entries(options.attributes).forEach(([key, value]) => {
        styleTag2.setAttribute(key, value);
      });
    }
    const pos = position === "prepend" ? "afterbegin" : "beforeend";
    container.insertAdjacentElement(pos, styleTag2);
    return styleTag2;
  }, "createStyleTag");
  let styleTag;
  if (singleTag) {
    let id = containers.indexOf(container);
    if (id === -1) {
      id = containers.push(container) - 1;
      styleTags[id] = {};
    }
    if (!styleTags[id][position]) {
      styleTags[id][position] = createStyleTag();
    }
    styleTag = styleTags[id][position];
  } else {
    styleTag = createStyleTag();
  }
  if (styleTag.styleSheet) {
    styleTag.styleSheet.cssText += css;
  } else {
    styleTag.append(document.createTextNode(css));
  }
}, "default");

var css = ".a {\\n  color: #f0f;\\n}\\n.style .foo {\\n  color: #4169e1;\\n}\\n.style .foo .inner {\\n  color: #4169e1;\\n}\\n";
injectCss(css,{});
"
`;

exports[`css > stylus > should work with stylus processed 'sourcemap' css > css 1`] = `
".a {
  color: #f0f;
}
.style .foo {
  color: #4169e1;
}
.style .foo .inner {
  color: #4169e1;
}

/*# sourceMappingURL=index.css.map */"
`;

exports[`css > stylus > should work with stylus processed 'sourcemap' css > js 1`] = `
"'use strict';

"
`;

exports[`css > stylus > should work with stylus processed 'sourcemap' css > js 2`] = `
"
"
`;

exports[`css > stylus > should work with stylus processed 'sourcemap' css > map 1`] = `"{"version":3,"sources":["../src/node_modules/foo/bar/a.styl","../src/style.styl","../src/foo.styl"],"names":[],"mappings":"AAEA;EACE,WAAO;ACDT;ACDA;EACE,cAAO;ADKT;ACJE;EACE,cAAO;ADMX","file":"index.css","sourcesContent":["color = magenta\\n\\n.a\\n  color: color\\n","@import \\"foo/bar/a\\"\\n@import \\"foo/bar/b.css\\"\\n@import \\"minireset.css/minireset.min.css\\"\\n\\n.style\\n  @import \\"foo.styl\\"\\n","\\n.foo\\n  color: royalblue\\n  .inner\\n    color: @color\\n"]}"`;
