// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`css > less > should work with less processed 'import' css > js 1`] = `
"'use strict';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
const containers = [];
const styleTags = [];
const injectCss = /* @__PURE__ */ __name2((css, options) => {
  if (!css || typeof document === "undefined") {
    return;
  }
  const position = options.prepend === true ? "prepend" : "append";
  const singleTag = options.singleTag === true;
  const container = typeof options.container === "string" ? document.querySelector(options.container) : document.querySelectorAll("head")[0];
  if (!container) {
    throw new Error("Unable to find container element");
  }
  const createStyleTag = /* @__PURE__ */ __name2(() => {
    const styleTag2 = document.createElement("style");
    styleTag2.setAttribute("type", "text/css");
    if (options.attributes) {
      Object.entries(options.attributes).forEach(([key, value]) => {
        styleTag2.setAttribute(key, value);
      });
    }
    const pos = position === "prepend" ? "afterbegin" : "beforeend";
    container.insertAdjacentElement(pos, styleTag2);
    return styleTag2;
  }, "createStyleTag");
  let styleTag;
  if (singleTag) {
    let id = containers.indexOf(container);
    if (id === -1) {
      id = containers.push(container) - 1;
      styleTags[id] = {};
    }
    if (!styleTags[id][position]) {
      styleTags[id][position] = createStyleTag();
    }
    styleTag = styleTags[id][position];
  } else {
    styleTag = createStyleTag();
  }
  if (styleTag.styleSheet) {
    styleTag.styleSheet.cssText += css;
  } else {
    styleTag.append(document.createTextNode(css));
  }
}, "default");

var css = ".d {\\n  color: red;\\n}\\n.a {\\n  color: royalblue;\\n}\\n.b {\\n  color: red;\\n}\\n.c {\\n  color: red;\\n}\\n.foo {\\n  color: royalblue;\\n}\\n/*! minireset.css v0.0.7 | MIT License | github.com/jgthms/minireset.css */\\nhtml,\\nbody,\\np,\\nol,\\nul,\\nli,\\ndl,\\ndt,\\ndd,\\nblockquote,\\nfigure,\\nfieldset,\\nlegend,\\ntextarea,\\npre,\\niframe,\\nhr,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  margin: 0;\\n  padding: 0;\\n}\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  font-size: 100%;\\n  font-weight: normal;\\n}\\nul {\\n  list-style: none;\\n}\\nbutton,\\ninput,\\nselect {\\n  margin: 0;\\n}\\nhtml {\\n  box-sizing: border-box;\\n}\\n*,\\n*::before,\\n*::after {\\n  box-sizing: inherit;\\n}\\nimg,\\nvideo {\\n  height: auto;\\n  max-width: 100%;\\n}\\niframe {\\n  border: 0;\\n}\\ntable {\\n  border-collapse: collapse;\\n  border-spacing: 0;\\n}\\ntd,\\nth {\\n  padding: 0;\\n}\\n";
injectCss(css,{});
"
`;

exports[`css > less > should work with less processed 'import' css > js 2`] = `
"var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
const containers = [];
const styleTags = [];
const injectCss = /* @__PURE__ */ __name2((css, options) => {
  if (!css || typeof document === "undefined") {
    return;
  }
  const position = options.prepend === true ? "prepend" : "append";
  const singleTag = options.singleTag === true;
  const container = typeof options.container === "string" ? document.querySelector(options.container) : document.querySelectorAll("head")[0];
  if (!container) {
    throw new Error("Unable to find container element");
  }
  const createStyleTag = /* @__PURE__ */ __name2(() => {
    const styleTag2 = document.createElement("style");
    styleTag2.setAttribute("type", "text/css");
    if (options.attributes) {
      Object.entries(options.attributes).forEach(([key, value]) => {
        styleTag2.setAttribute(key, value);
      });
    }
    const pos = position === "prepend" ? "afterbegin" : "beforeend";
    container.insertAdjacentElement(pos, styleTag2);
    return styleTag2;
  }, "createStyleTag");
  let styleTag;
  if (singleTag) {
    let id = containers.indexOf(container);
    if (id === -1) {
      id = containers.push(container) - 1;
      styleTags[id] = {};
    }
    if (!styleTags[id][position]) {
      styleTags[id][position] = createStyleTag();
    }
    styleTag = styleTags[id][position];
  } else {
    styleTag = createStyleTag();
  }
  if (styleTag.styleSheet) {
    styleTag.styleSheet.cssText += css;
  } else {
    styleTag.append(document.createTextNode(css));
  }
}, "default");

var css = ".d {\\n  color: red;\\n}\\n.a {\\n  color: royalblue;\\n}\\n.b {\\n  color: red;\\n}\\n.c {\\n  color: red;\\n}\\n.foo {\\n  color: royalblue;\\n}\\n/*! minireset.css v0.0.7 | MIT License | github.com/jgthms/minireset.css */\\nhtml,\\nbody,\\np,\\nol,\\nul,\\nli,\\ndl,\\ndt,\\ndd,\\nblockquote,\\nfigure,\\nfieldset,\\nlegend,\\ntextarea,\\npre,\\niframe,\\nhr,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  margin: 0;\\n  padding: 0;\\n}\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  font-size: 100%;\\n  font-weight: normal;\\n}\\nul {\\n  list-style: none;\\n}\\nbutton,\\ninput,\\nselect {\\n  margin: 0;\\n}\\nhtml {\\n  box-sizing: border-box;\\n}\\n*,\\n*::before,\\n*::after {\\n  box-sizing: inherit;\\n}\\nimg,\\nvideo {\\n  height: auto;\\n  max-width: 100%;\\n}\\niframe {\\n  border: 0;\\n}\\ntable {\\n  border-collapse: collapse;\\n  border-spacing: 0;\\n}\\ntd,\\nth {\\n  padding: 0;\\n}\\n";
injectCss(css,{});
"
`;

exports[`css > less > should work with less processed 'paths' css > js 1`] = `
"'use strict';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
const containers = [];
const styleTags = [];
const injectCss = /* @__PURE__ */ __name2((css, options) => {
  if (!css || typeof document === "undefined") {
    return;
  }
  const position = options.prepend === true ? "prepend" : "append";
  const singleTag = options.singleTag === true;
  const container = typeof options.container === "string" ? document.querySelector(options.container) : document.querySelectorAll("head")[0];
  if (!container) {
    throw new Error("Unable to find container element");
  }
  const createStyleTag = /* @__PURE__ */ __name2(() => {
    const styleTag2 = document.createElement("style");
    styleTag2.setAttribute("type", "text/css");
    if (options.attributes) {
      Object.entries(options.attributes).forEach(([key, value]) => {
        styleTag2.setAttribute(key, value);
      });
    }
    const pos = position === "prepend" ? "afterbegin" : "beforeend";
    container.insertAdjacentElement(pos, styleTag2);
    return styleTag2;
  }, "createStyleTag");
  let styleTag;
  if (singleTag) {
    let id = containers.indexOf(container);
    if (id === -1) {
      id = containers.push(container) - 1;
      styleTags[id] = {};
    }
    if (!styleTags[id][position]) {
      styleTags[id][position] = createStyleTag();
    }
    styleTag = styleTags[id][position];
  } else {
    styleTag = createStyleTag();
  }
  if (styleTag.styleSheet) {
    styleTag.styleSheet.cssText += css;
  } else {
    styleTag.append(document.createTextNode(css));
  }
}, "default");

var css = ".subfile {\\n  color: royalblue;\\n}\\n";
injectCss(css,{});
"
`;

exports[`css > less > should work with less processed 'paths' css > js 2`] = `
"var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __defProp2 = Object.defineProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
const containers = [];
const styleTags = [];
const injectCss = /* @__PURE__ */ __name2((css, options) => {
  if (!css || typeof document === "undefined") {
    return;
  }
  const position = options.prepend === true ? "prepend" : "append";
  const singleTag = options.singleTag === true;
  const container = typeof options.container === "string" ? document.querySelector(options.container) : document.querySelectorAll("head")[0];
  if (!container) {
    throw new Error("Unable to find container element");
  }
  const createStyleTag = /* @__PURE__ */ __name2(() => {
    const styleTag2 = document.createElement("style");
    styleTag2.setAttribute("type", "text/css");
    if (options.attributes) {
      Object.entries(options.attributes).forEach(([key, value]) => {
        styleTag2.setAttribute(key, value);
      });
    }
    const pos = position === "prepend" ? "afterbegin" : "beforeend";
    container.insertAdjacentElement(pos, styleTag2);
    return styleTag2;
  }, "createStyleTag");
  let styleTag;
  if (singleTag) {
    let id = containers.indexOf(container);
    if (id === -1) {
      id = containers.push(container) - 1;
      styleTags[id] = {};
    }
    if (!styleTags[id][position]) {
      styleTags[id][position] = createStyleTag();
    }
    styleTag = styleTags[id][position];
  } else {
    styleTag = createStyleTag();
  }
  if (styleTag.styleSheet) {
    styleTag.styleSheet.cssText += css;
  } else {
    styleTag.append(document.createTextNode(css));
  }
}, "default");

var css = ".subfile {\\n  color: royalblue;\\n}\\n";
injectCss(css,{});
"
`;

exports[`css > less > should work with less processed 'sourcemap' css > css 1`] = `
".d {
  color: red;
}
.a {
  color: royalblue;
}
.b {
  color: red;
}
.c {
  color: red;
}
.foo {
  color: royalblue;
}
/*! minireset.css v0.0.7 | MIT License | github.com/jgthms/minireset.css */
html,
body,
p,
ol,
ul,
li,
dl,
dt,
dd,
blockquote,
figure,
fieldset,
legend,
textarea,
pre,
iframe,
hr,
h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0;
  padding: 0;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: 100%;
  font-weight: normal;
}
ul {
  list-style: none;
}
button,
input,
select {
  margin: 0;
}
html {
  box-sizing: border-box;
}
*,
*::before,
*::after {
  box-sizing: inherit;
}
img,
video {
  height: auto;
  max-width: 100%;
}
iframe {
  border: 0;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
td,
th {
  padding: 0;
}

/*# sourceMappingURL=index.css.map */"
`;

exports[`css > less > should work with less processed 'sourcemap' css > js 1`] = `
"'use strict';

"
`;

exports[`css > less > should work with less processed 'sourcemap' css > js 2`] = `
"
"
`;

exports[`css > less > should work with less processed 'sourcemap' css > map 1`] = `"{"version":3,"sources":["../node_modules/foo/bar/d.css","../node_modules/foo/bar/a.less","../src/style.less","../node_modules/foo/bar/b.less","../node_modules/foo/bar/c.css","../src/foo.less","../../../home/prisis/WebstormProjects/visulima/packem/node_modules/.pnpm/minireset.css@0.0.7/node_modules/minireset.css/minireset.min.css"],"names":[],"mappings":"AAAA;EACE,UAAU;AACZ;ACAA;EACE,gBAAA;ACAF;ACHA;EACE,UAAA;ADKF;AENA;EACE,UAAA;AFQF;AGPA;EACI,gBAAA;AHSJ;AACA,0EAA0E;AIbC;;;;;;;;;;;;;;;;;;;;;;;EAAyG,SAAA;EAAS,UAAA;AJuC7L;AIvCuM;;;;;;EAAkB,eAAA;EAAe,mBAAA;AJgDxO;AIhD2P;EAAG,gBAAA;AJmD9P;AInD8Q;;;EAAoB,SAAA;AJwDlS;AIxD2S;EAAK,sBAAA;AJ2DhT;AI3DsU;;;EAAqB,mBAAA;AJgE3V;AIhE8W;;EAAU,YAAA;EAAY,eAAA;AJqEpY;AIrEmZ;EAAO,SAAA;AJwE1Z;AIxEma;EAAM,yBAAA;EAAyB,iBAAA;AJ4Elc;AI5Emd;;EAAM,UAAA;AJgFzd","file":"index.css","sourcesContent":[".d {\\n  color: red;\\n}\\n","@import \\"partial\\";\\n\\n.a {\\n  color: @color;\\n}\\n","@import \\"~foo/bar/a\\";\\n@import \\"~foo/bar/b\\";\\n@import \\"~foo/bar/c\\";\\n@import \\"foo/bar/d.css\\";\\n@import \\"~foo/bar/partial\\";\\n@import \\"foo.less\\";\\n@import \\"~minireset.css/minireset.min\\";\\n",".b {\\n  color: red;\\n}\\n",".c {\\n  color: red;\\n}\\n","@import \\"partial\\";\\n\\n.foo {\\n    color: @color;\\n}\\n","/*! minireset.css v0.0.7 | MIT License | github.com/jgthms/minireset.css */html,body,p,ol,ul,li,dl,dt,dd,blockquote,figure,fieldset,legend,textarea,pre,iframe,hr,h1,h2,h3,h4,h5,h6{margin:0;padding:0}h1,h2,h3,h4,h5,h6{font-size:100%;font-weight:normal}ul{list-style:none}button,input,select{margin:0}html{box-sizing:border-box}*,*::before,*::after{box-sizing:inherit}img,video{height:auto;max-width:100%}iframe{border:0}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}\\n"]}"`;
